pub use self::macro_deps::*;
use crate::space::Space;

pub mod macro_deps {
    pub use crate::IdType;
    pub use hibitset::BitSetLike;
    pub use moleengine_ecs_codegen::*;
}

/// A System can perform arbitrary operations on game objects with desired associated Components.
/// They are executed within a Space with Space::run_system::<Type>() or Space::run_optional_system::<Type>().
/// See the moleengine_ecs_codegen crate for information on how to create these yourself.
pub trait System: Sized {
    type Runner: SystemRunner;
    fn operate(items: &mut [Self]);
}

/// This trait enables Systems to be run in a Space with minimal boilerplate code.
/// It is autogenerated for a System with the #[system_data] attribute macro.
pub trait SystemRunner {
    /// Runs the associated System in the given Space.
    /// Returns Some(()) if the run was successful, or None if ComponentContainers were missing.
    fn run(space: &Space) -> Option<()>;
}

// test
#[derive(Debug)]
pub struct Position {
    pub x: f32,
    pub y: f32,
}
pub struct Velocity {
    pub x: f32,
    pub y: f32,
}

#[system_item]
pub struct Mover<'a> {
    position: &'a mut Position,
    velocity: &'a Velocity,
}

#[system_logic]
fn do_move(items: &mut [Mover<'_>]) {
    for item in items {
        item.position.x += item.velocity.x;
        item.position.y += item.velocity.y;
        println!("position is {:?}", item.position);
    }
}
